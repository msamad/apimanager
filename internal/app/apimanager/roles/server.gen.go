// Package roles provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package roles

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /roles)
	List2(ctx echo.Context) error

	// (POST /roles)
	Create3(ctx echo.Context) error

	// (DELETE /roles/{roleId})
	Delete3(ctx echo.Context, roleId string) error

	// (GET /roles/{roleId})
	Get3(ctx echo.Context, roleId string) error

	// (PUT /roles/{roleId})
	Update2(ctx echo.Context, roleId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List2 converts echo context to params.
func (w *ServerInterfaceWrapper) List2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.List2(ctx)
	return err
}

// Create3 converts echo context to params.
func (w *ServerInterfaceWrapper) Create3(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Create3(ctx)
	return err
}

// Delete3 converts echo context to params.
func (w *ServerInterfaceWrapper) Delete3(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roleId" -------------
	var roleId string

	err = runtime.BindStyledParameter("simple", false, "roleId", ctx.Param("roleId"), &roleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roleId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Delete3(ctx, roleId)
	return err
}

// Get3 converts echo context to params.
func (w *ServerInterfaceWrapper) Get3(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roleId" -------------
	var roleId string

	err = runtime.BindStyledParameter("simple", false, "roleId", ctx.Param("roleId"), &roleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roleId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get3(ctx, roleId)
	return err
}

// Update2 converts echo context to params.
func (w *ServerInterfaceWrapper) Update2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roleId" -------------
	var roleId string

	err = runtime.BindStyledParameter("simple", false, "roleId", ctx.Param("roleId"), &roleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roleId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Update2(ctx, roleId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/roles", wrapper.List2)
	router.POST("/roles", wrapper.Create3)
	router.DELETE("/roles/:roleId", wrapper.Delete3)
	router.GET("/roles/:roleId", wrapper.Get3)
	router.PUT("/roles/:roleId", wrapper.Update2)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZz3LbOA9/FQ+/76ia3uTm07ZJp5OZbtNppnvp5IBQsMyu+KckFder8bvvkKJsSVYS",
	"yZF39tBLAgLgjwAIEhRcEqaEVhKls2RZEsvWKCCQn3DzReX4DkH6oTZKo3EcgxAKpz4YkM4P3FYjWZIH",
	"pXKvvEtIipYZrh1XsqFgneEy83IJAnsFGo3g1nIlwzLcoQgEykKQ5TeiTPYnxw1JPPU+5a6i3qaCS5IQ",
	"0DyKQfMoBs1rMcs5Shc1qkFUqga1ns5BRi1PRh1PVhr3ybHlkQHGwJYkpJD8R4E3lf3OFLg76KiH78ic",
	"n3RygJlBcJi+2/ZGMUpvA+5KGQGOLEkKDt84LpD0mP/SjvH010Y+s5FftY/ur/Ny1jB7Fpcr5R1kSjpg",
	"IZwogOc+vwshtr+Hv3OmBKnDVgn8GsarrZ3TS0oDs1Lm6mgPyK1G+fbzzexyvphZjYyvOAMvm6nVzAv+",
	"AAkZGpKQnDOUNuxPXPCtBrbG2cV80VrVLindbDZzCOK5MhmNcy39eHP1/tPd+zcX88V87UQeQoRG2NvV",
	"HZpHzvBgOmguQNIgpv4wc5eHZVtmPaKxlS+/zRfzhQdUGiVoTpbkMrASosGtQ8JQYC5m0S4hNFUbmStI",
	"LS1r8ibdRWEGDjewtZ0hLSN1rNkUUZSpVjwcBa+jTAaS/w3N5Vs8WjaHB/DnlYJDj9xtB2prbodr0hI0",
	"H25JY8YJZu2nxh21r5hKy0jtJgGZwpsGmj/UBpibxkOa4opLHi/VCfCeS9zxaAKd4czS6ir9glYrafHO",
	"wVTutxf4aiHDaYH9BX9Guz38Gaw257PYFkKA2Z4xJsV08fDhtRNC0dL/8xpa5Zxtr9bAJzp4AbB6SU2I",
	"RsvK0NPu8R5gg8qkaD5Paq114IqBWNVJH6dMy4oYHIXjeSOrQA/AuMr2DMDY+jYIajr/mpia/4VTIxrM",
	"uHVmS7/boUVvPPZPkU8JPbLojwSlZU2+JsGfuZFB8xFFahj2uPtuHOboW28Y/El3n0DxgGacMi0Li2aw",
	"9SOqXLuKnTJn5EXRmTzuEnxi8tgL8EWYaXw6ObmH441O7JehT0pqo/JRqrT0//ywk9k6LzK+T4c4ovAI",
	"PIeHHD/3isuKOEJpCOL77BpXdohOHddrXHnBShlRTzvC6ZsUP8EOFtUBIhmG/o3SaGJIyJJ85NZdkITU",
	"z/SgebFY1E0frHpooHUeOzJ1sYvN61Yf7P8GV2RJ/kcPbW4ae9x0363rdqNCo6ndDrIFY2jtqshne3NJ",
	"aFFBZsnyW+jkWnK/S4hWtsetq9CSvQyO/SjQuncq3Y7y6TlXmr36XTD/VeEbFrVXRGmfBvvk98ummKPD",
	"49hdB/5laFcZEOhCzfhWEv99EVpYh15fBRfDzA2mVTcxaXjXaUXu7jvRSnEFRe4q8sQk6E3tD+j+NSf+",
	"c1ueEF30xKRqnF+cNSzTn7dOu7/nyL0+ifwZsQiGrf0b8woc5CqjKJ05lKJjuQ+V1cB6VDqc9sdiZPY1",
	"Y6OoWdciy9erPWtrHQqKP7Uyrs3j4pjX+qwNOJQVxqB0fkBjm/8g7NTGNrP7RulKNVcms08Kn5BUAXp6",
	"Jqbc+UL8ph3JjlZfRDsq7R9x+hRykE/b8chx07VjlxCL5rE+TK1fPkBrvyU58acjZt3hpwtWJWSy51zH",
	"/n+T96Hq5jdZtw0/m/zqmdLihJfB7PA0aAp99jfHdyHTWpyQQE3OV4uG7O53/wQAAP//TePAM80eAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

