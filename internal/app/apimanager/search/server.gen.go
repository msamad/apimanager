// Package search provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package search

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /search/apiCatalog/entries)
	SearchApiCatalog1(ctx echo.Context) error

	// (GET /search/apiCatalog/namespaces)
	GetApiNamespaces1(ctx echo.Context) error

	// (POST /search/apis)
	SearchApis1(ctx echo.Context) error

	// (POST /search/clients)
	SearchClients1(ctx echo.Context) error

	// (POST /search/organizations)
	SearchOrgs1(ctx echo.Context) error

	// (POST /search/roles)
	SearchRoles1(ctx echo.Context) error

	// (POST /search/users)
	SearchUsers1(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchApiCatalog1 converts echo context to params.
func (w *ServerInterfaceWrapper) SearchApiCatalog1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchApiCatalog1(ctx)
	return err
}

// GetApiNamespaces1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiNamespaces1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiNamespaces1(ctx)
	return err
}

// SearchApis1 converts echo context to params.
func (w *ServerInterfaceWrapper) SearchApis1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchApis1(ctx)
	return err
}

// SearchClients1 converts echo context to params.
func (w *ServerInterfaceWrapper) SearchClients1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchClients1(ctx)
	return err
}

// SearchOrgs1 converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrgs1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrgs1(ctx)
	return err
}

// SearchRoles1 converts echo context to params.
func (w *ServerInterfaceWrapper) SearchRoles1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchRoles1(ctx)
	return err
}

// SearchUsers1 converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUsers1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchUsers1(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/search/apiCatalog/entries", wrapper.SearchApiCatalog1)
	router.GET("/search/apiCatalog/namespaces", wrapper.GetApiNamespaces1)
	router.POST("/search/apis", wrapper.SearchApis1)
	router.POST("/search/clients", wrapper.SearchClients1)
	router.POST("/search/organizations", wrapper.SearchOrgs1)
	router.POST("/search/roles", wrapper.SearchRoles1)
	router.POST("/search/users", wrapper.SearchUsers1)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"q/8CAAD//8VZpAVMLQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

