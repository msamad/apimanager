// Package downloads provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package downloads

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /downloads/{downloadId})
	GetDownloadById(ctx echo.Context, downloadId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDownloadById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDownloadById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "downloadId" -------------
	var downloadId string

	err = runtime.BindStyledParameter("simple", false, "downloadId", ctx.Param("downloadId"), &downloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter downloadId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDownloadById(ctx, downloadId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/downloads/:downloadId", wrapper.GetDownloadById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RYS4/bNhD+KwbPiukmN52a7gaBgba7yCKnYg8TaiSz5askZccV9N8L6mFLfkV0tJdd",
	"8puZjx+HQ1JmRZiWRitU3pG0qhPCVa5JGnDlgfnQRAlckJRkpZT7X5u/S6YlSYgCib2BJKS0wW3jvUkp",
	"bcDWmWtSJyRDxyw3nmtFUvJkUH18Xi8+LFcLZ5DxnDMItoXOF8HwBygo0JKECM5QOQxSugE/GmAbXLxf",
	"rkajupTS3W63hMa81LagXayjv68fPv358und++VqufFSBEUerXRP+QvaLWd4lA6GS1C0MVOSEM+9aIYd",
	"ydqide1cflmulqtAqA0qMJyk5EMDJcSA34TMEgoszK7LMs30TgkNmaNV31xndXAssEm6NmibfKwzkpLP",
	"6B87t9/266whtiDRo3Uk/asiPOgIgw1W5cBLEmLx35JbzEjqbYkJcWyDEsJAfm+Ct/OWq4LU9WtwdkaH",
	"rAV7hjmUwrfN4Qq6kjF0Li/F4iCW1CGtUARRpFfsyGuAaQEed7DvU9B3adW12gRcM1FUmdFc+c5H2wIU",
	"/w+GWR1htBp2j+S3nZp12nK/n+htuJvuSSswfLqSQcQdsg6hXaG6nwilVdeqZyGZYzYDtnBWWWB+nhnS",
	"DHOueFvlc/DdKtx4NonecuYoExyV/9Jt1RcPc01/PMBXBwXOS2wEqDfUHejfQLV9O8WulBLs/g1zUs6X",
	"j5BeNyMVrcK/4GG04Gz/sAE+08ZrCDm6edlo1Qq97xy/QGxR2wzt86xqnQdfTuRqd3qcM63axuQsnMdF",
	"3gIXCOJuthsEsffbJKr55jfkNPwfnJvRYsGdt3v6t5t66cVzf5diTurISz+SlFZ982cK/MaJDIZHXFLT",
	"uOPOuzjO6FNvGv1dZ59E+a354RPhTKvSoZ2sPuKWG99i98REHhQnwXGH4JXg2APwhzTzzOnu4p7OF13Y",
	"P6a+q6itFlGutAr/Qvekso0oC34oh65HYQtcwDeBzxfNVds4YxkYuu+zR8zdFJ8+r4+YB0OurezDzngu",
	"BXU/wY6KhgkaZ6ADHYJlm3CyPoAHoQuKytvjApzbFUh0BtgFlxNk/InUgZeeIDrTUGwHhVU6QHvnUVL8",
	"brT1Y4zLc2z0MdfwUFZai8qHDu3e7I7Gk4oYg6c789RquLaFu2q8YmkTdD0SM+5D+b0bZ/LE61JGT1wM",
	"Wsmdu+EgQF3XseW4O9VRJ8Sh3fZvaaNnTDAmLIkg9evhZev4DsnaR6/kgPRvXkPsc/uGNYSeBvMc4u3m",
	"HCHNflgcN8TQ+EULHPZfmkobIU0BDZGvDi2pX+v/AwAA//9vf8EP+xUAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

