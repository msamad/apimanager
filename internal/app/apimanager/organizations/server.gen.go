// Package organizations provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package organizations

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /organizations)
	Create(ctx echo.Context) error

	// (DELETE /organizations/{organizationId})
	Delete(ctx echo.Context, organizationId string) error

	// (GET /organizations/{organizationId})
	Get(ctx echo.Context, organizationId string) error

	// (PUT /organizations/{organizationId})
	Update(ctx echo.Context, organizationId string) error

	// (GET /organizations/{organizationId}/activity)
	Activity1(ctx echo.Context, organizationId string, params Activity1Params) error

	// (GET /organizations/{organizationId}/apis)
	ListApis1(ctx echo.Context, organizationId string) error

	// (POST /organizations/{organizationId}/apis)
	CreateApi1(ctx echo.Context, organizationId string) error

	// (DELETE /organizations/{organizationId}/apis/{apiId})
	DeleteApi1(ctx echo.Context, organizationId string, apiId string) error

	// (GET /organizations/{organizationId}/apis/{apiId})
	GetApi1(ctx echo.Context, organizationId string, apiId string) error

	// (PUT /organizations/{organizationId}/apis/{apiId})
	UpdateApi1(ctx echo.Context, organizationId string, apiId string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/activity)
	GetApiActivity1(ctx echo.Context, organizationId string, apiId string, params GetApiActivity1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions)
	ListApiVersions1(ctx echo.Context, organizationId string, apiId string) error

	// (POST /organizations/{organizationId}/apis/{apiId}/versions)
	CreateApiVersion1(ctx echo.Context, organizationId string, apiId string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version})
	GetApiVersion1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (PUT /organizations/{organizationId}/apis/{apiId}/versions/{version})
	UpdateApiVersion1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/activity)
	GetApiVersionActivity1(ctx echo.Context, organizationId string, apiId string, version string, params GetApiVersionActivity1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/contracts)
	GetApiVersionContracts1(ctx echo.Context, organizationId string, apiId string, version string, params GetApiVersionContracts1Params) error

	// (DELETE /organizations/{organizationId}/apis/{apiId}/versions/{version}/definition)
	DeleteApiDefinition1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/definition)
	GetApiDefinition1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (POST /organizations/{organizationId}/apis/{apiId}/versions/{version}/definition)
	UpdateApiDefinitionFromURL1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (PUT /organizations/{organizationId}/apis/{apiId}/versions/{version}/definition)
	UpdateApiDefinition1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/endpoint)
	GetApiVersionEndpointInfo1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/metrics/clientResponseStats)
	GetResponseStatsPerClient1(ctx echo.Context, organizationId string, apiId string, version string, params GetResponseStatsPerClient1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/metrics/clientUsage)
	GetUsagePerClient1(ctx echo.Context, organizationId string, apiId string, version string, params GetUsagePerClient1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/metrics/planResponseStats)
	GetResponseStatsPerPlan1(ctx echo.Context, organizationId string, apiId string, version string, params GetResponseStatsPerPlan1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/metrics/planUsage)
	GetUsagePerPlan1(ctx echo.Context, organizationId string, apiId string, version string, params GetUsagePerPlan1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/metrics/responseStats)
	GetResponseStats1(ctx echo.Context, organizationId string, apiId string, version string, params GetResponseStats1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/metrics/summaryResponseStats)
	GetResponseStatsSummary1(ctx echo.Context, organizationId string, apiId string, version string, params GetResponseStatsSummary1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/metrics/usage)
	GetUsage1(ctx echo.Context, organizationId string, apiId string, version string, params GetUsage1Params) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/plans)
	GetApiVersionPlans1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/plans/{planId}/policyChain)
	GetApiPolicyChain1(ctx echo.Context, organizationId string, apiId string, version string, planId string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/policies)
	ListApiPolicies1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (POST /organizations/{organizationId}/apis/{apiId}/versions/{version}/policies)
	CreateApiPolicy1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (DELETE /organizations/{organizationId}/apis/{apiId}/versions/{version}/policies/{policyId})
	DeleteApiPolicy1(ctx echo.Context, organizationId string, apiId string, version string, policyId int64) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/policies/{policyId})
	GetApiPolicy1(ctx echo.Context, organizationId string, apiId string, version string, policyId int64) error

	// (PUT /organizations/{organizationId}/apis/{apiId}/versions/{version}/policies/{policyId})
	UpdateApiPolicy1(ctx echo.Context, organizationId string, apiId string, version string, policyId int64) error

	// (POST /organizations/{organizationId}/apis/{apiId}/versions/{version}/reorderPolicies)
	ReorderApiPolicies1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (GET /organizations/{organizationId}/apis/{apiId}/versions/{version}/status)
	GetApiVersionStatus1(ctx echo.Context, organizationId string, apiId string, version string) error

	// (GET /organizations/{organizationId}/clients)
	ListClients1(ctx echo.Context, organizationId string) error

	// (POST /organizations/{organizationId}/clients)
	CreateClient1(ctx echo.Context, organizationId string) error

	// (DELETE /organizations/{organizationId}/clients/{clientId})
	DeleteClient1(ctx echo.Context, organizationId string, clientId string) error

	// (GET /organizations/{organizationId}/clients/{clientId})
	GetClient1(ctx echo.Context, organizationId string, clientId string) error

	// (PUT /organizations/{organizationId}/clients/{clientId})
	UpdateClient1(ctx echo.Context, organizationId string, clientId string) error

	// (GET /organizations/{organizationId}/clients/{clientId}/activity)
	GetClientActivity1(ctx echo.Context, organizationId string, clientId string, params GetClientActivity1Params) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions)
	ListClientVersions1(ctx echo.Context, organizationId string, clientId string) error

	// (POST /organizations/{organizationId}/clients/{clientId}/versions)
	CreateClientVersion1(ctx echo.Context, organizationId string, clientId string) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version})
	GetClientVersion1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/activity)
	GetClientVersionActivity1(ctx echo.Context, organizationId string, clientId string, version string, params GetClientVersionActivity1Params) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/apikey)
	GetClientApiKey1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (PUT /organizations/{organizationId}/clients/{clientId}/versions/{version}/apikey)
	UpdateClientApiKey1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/apiregistry/json)
	GetApiRegistryJSON1(ctx echo.Context, organizationId string, clientId string, version string, params GetApiRegistryJSON1Params) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/apiregistry/xml)
	GetApiRegistryXML1(ctx echo.Context, organizationId string, clientId string, version string, params GetApiRegistryXML1Params) error

	// (DELETE /organizations/{organizationId}/clients/{clientId}/versions/{version}/contracts)
	DeleteAllContracts1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/contracts)
	GetClientVersionContracts1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (POST /organizations/{organizationId}/clients/{clientId}/versions/{version}/contracts)
	CreateContract1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (DELETE /organizations/{organizationId}/clients/{clientId}/versions/{version}/contracts/{contractId})
	DeleteContract1(ctx echo.Context, organizationId string, clientId string, version string, contractId int64) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/contracts/{contractId})
	GetContract1(ctx echo.Context, organizationId string, clientId string, version string, contractId int64) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/metrics/apiUsage)
	GetClientUsagePerApi1(ctx echo.Context, organizationId string, clientId string, version string, params GetClientUsagePerApi1Params) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/policies)
	ListClientPolicies1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (POST /organizations/{organizationId}/clients/{clientId}/versions/{version}/policies)
	CreateClientPolicy1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (DELETE /organizations/{organizationId}/clients/{clientId}/versions/{version}/policies/{policyId})
	DeleteClientPolicy1(ctx echo.Context, organizationId string, clientId string, version string, policyId int64) error

	// (GET /organizations/{organizationId}/clients/{clientId}/versions/{version}/policies/{policyId})
	GetClientPolicy1(ctx echo.Context, organizationId string, clientId string, version string, policyId int64) error

	// (PUT /organizations/{organizationId}/clients/{clientId}/versions/{version}/policies/{policyId})
	UpdateClientPolicy1(ctx echo.Context, organizationId string, clientId string, version string, policyId int64) error

	// (POST /organizations/{organizationId}/clients/{clientId}/versions/{version}/reorderPolicies)
	ReorderClientPolicies1(ctx echo.Context, organizationId string, clientId string, version string) error

	// (GET /organizations/{organizationId}/members)
	ListMembers1(ctx echo.Context, organizationId string) error

	// (DELETE /organizations/{organizationId}/members/{userId})
	RevokeAll1(ctx echo.Context, organizationId string, userId string) error

	// (GET /organizations/{organizationId}/plans)
	ListPlans1(ctx echo.Context, organizationId string) error

	// (POST /organizations/{organizationId}/plans)
	CreatePlan1(ctx echo.Context, organizationId string) error

	// (DELETE /organizations/{organizationId}/plans/{planId})
	DeletePlan1(ctx echo.Context, organizationId string, planId string) error

	// (GET /organizations/{organizationId}/plans/{planId})
	GetPlan1(ctx echo.Context, organizationId string, planId string) error

	// (PUT /organizations/{organizationId}/plans/{planId})
	UpdatePlan1(ctx echo.Context, organizationId string, planId string) error

	// (GET /organizations/{organizationId}/plans/{planId}/activity)
	GetPlanActivity1(ctx echo.Context, organizationId string, planId string, params GetPlanActivity1Params) error

	// (GET /organizations/{organizationId}/plans/{planId}/versions)
	ListPlanVersions1(ctx echo.Context, organizationId string, planId string) error

	// (POST /organizations/{organizationId}/plans/{planId}/versions)
	CreatePlanVersion1(ctx echo.Context, organizationId string, planId string) error

	// (GET /organizations/{organizationId}/plans/{planId}/versions/{version})
	GetPlanVersion1(ctx echo.Context, organizationId string, planId string, version string) error

	// (GET /organizations/{organizationId}/plans/{planId}/versions/{version}/activity)
	GetPlanVersionActivity1(ctx echo.Context, organizationId string, planId string, version string, params GetPlanVersionActivity1Params) error

	// (GET /organizations/{organizationId}/plans/{planId}/versions/{version}/policies)
	ListPlanPolicies1(ctx echo.Context, organizationId string, planId string, version string) error

	// (POST /organizations/{organizationId}/plans/{planId}/versions/{version}/policies)
	CreatePlanPolicy1(ctx echo.Context, organizationId string, planId string, version string) error

	// (DELETE /organizations/{organizationId}/plans/{planId}/versions/{version}/policies/{policyId})
	DeletePlanPolicy1(ctx echo.Context, organizationId string, planId string, version string, policyId int64) error

	// (GET /organizations/{organizationId}/plans/{planId}/versions/{version}/policies/{policyId})
	GetPlanPolicy1(ctx echo.Context, organizationId string, planId string, version string, policyId int64) error

	// (PUT /organizations/{organizationId}/plans/{planId}/versions/{version}/policies/{policyId})
	UpdatePlanPolicy1(ctx echo.Context, organizationId string, planId string, version string, policyId int64) error

	// (POST /organizations/{organizationId}/plans/{planId}/versions/{version}/reorderPolicies)
	ReorderPlanPolicies1(ctx echo.Context, organizationId string, planId string, version string) error

	// (POST /organizations/{organizationId}/roles)
	Grant1(ctx echo.Context, organizationId string) error

	// (DELETE /organizations/{organizationId}/roles/{roleId}/{userId})
	Revoke1(ctx echo.Context, organizationId string, roleId string, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Create converts echo context to params.
func (w *ServerInterfaceWrapper) Create(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Create(ctx)
	return err
}

// Delete converts echo context to params.
func (w *ServerInterfaceWrapper) Delete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Delete(ctx, organizationId)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx, organizationId)
	return err
}

// Update converts echo context to params.
func (w *ServerInterfaceWrapper) Update(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Update(ctx, organizationId)
	return err
}

// Activity1 converts echo context to params.
func (w *ServerInterfaceWrapper) Activity1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params Activity1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Activity1(ctx, organizationId, params)
	return err
}

// ListApis1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListApis1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListApis1(ctx, organizationId)
	return err
}

// CreateApi1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApi1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateApi1(ctx, organizationId)
	return err
}

// DeleteApi1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApi1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApi1(ctx, organizationId, apiId)
	return err
}

// GetApi1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApi1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApi1(ctx, organizationId, apiId)
	return err
}

// UpdateApi1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApi1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApi1(ctx, organizationId, apiId)
	return err
}

// GetApiActivity1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiActivity1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiActivity1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiActivity1(ctx, organizationId, apiId, params)
	return err
}

// ListApiVersions1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListApiVersions1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListApiVersions1(ctx, organizationId, apiId)
	return err
}

// CreateApiVersion1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApiVersion1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateApiVersion1(ctx, organizationId, apiId)
	return err
}

// GetApiVersion1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVersion1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiVersion1(ctx, organizationId, apiId, version)
	return err
}

// UpdateApiVersion1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApiVersion1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApiVersion1(ctx, organizationId, apiId, version)
	return err
}

// GetApiVersionActivity1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVersionActivity1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiVersionActivity1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiVersionActivity1(ctx, organizationId, apiId, version, params)
	return err
}

// GetApiVersionContracts1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVersionContracts1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiVersionContracts1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiVersionContracts1(ctx, organizationId, apiId, version, params)
	return err
}

// DeleteApiDefinition1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiDefinition1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApiDefinition1(ctx, organizationId, apiId, version)
	return err
}

// GetApiDefinition1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiDefinition1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiDefinition1(ctx, organizationId, apiId, version)
	return err
}

// UpdateApiDefinitionFromURL1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApiDefinitionFromURL1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApiDefinitionFromURL1(ctx, organizationId, apiId, version)
	return err
}

// UpdateApiDefinition1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApiDefinition1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApiDefinition1(ctx, organizationId, apiId, version)
	return err
}

// GetApiVersionEndpointInfo1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVersionEndpointInfo1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiVersionEndpointInfo1(ctx, organizationId, apiId, version)
	return err
}

// GetResponseStatsPerClient1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetResponseStatsPerClient1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResponseStatsPerClient1Params
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResponseStatsPerClient1(ctx, organizationId, apiId, version, params)
	return err
}

// GetUsagePerClient1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsagePerClient1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsagePerClient1Params
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsagePerClient1(ctx, organizationId, apiId, version, params)
	return err
}

// GetResponseStatsPerPlan1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetResponseStatsPerPlan1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResponseStatsPerPlan1Params
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResponseStatsPerPlan1(ctx, organizationId, apiId, version, params)
	return err
}

// GetUsagePerPlan1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsagePerPlan1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsagePerPlan1Params
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsagePerPlan1(ctx, organizationId, apiId, version, params)
	return err
}

// GetResponseStats1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetResponseStats1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResponseStats1Params
	// ------------- Optional query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, false, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResponseStats1(ctx, organizationId, apiId, version, params)
	return err
}

// GetResponseStatsSummary1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetResponseStatsSummary1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResponseStatsSummary1Params
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResponseStatsSummary1(ctx, organizationId, apiId, version, params)
	return err
}

// GetUsage1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsage1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsage1Params
	// ------------- Optional query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, false, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsage1(ctx, organizationId, apiId, version, params)
	return err
}

// GetApiVersionPlans1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVersionPlans1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiVersionPlans1(ctx, organizationId, apiId, version)
	return err
}

// GetApiPolicyChain1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiPolicyChain1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiPolicyChain1(ctx, organizationId, apiId, version, planId)
	return err
}

// ListApiPolicies1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListApiPolicies1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListApiPolicies1(ctx, organizationId, apiId, version)
	return err
}

// CreateApiPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApiPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateApiPolicy1(ctx, organizationId, apiId, version)
	return err
}

// DeleteApiPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApiPolicy1(ctx, organizationId, apiId, version, policyId)
	return err
}

// GetApiPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiPolicy1(ctx, organizationId, apiId, version, policyId)
	return err
}

// UpdateApiPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApiPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApiPolicy1(ctx, organizationId, apiId, version, policyId)
	return err
}

// ReorderApiPolicies1 converts echo context to params.
func (w *ServerInterfaceWrapper) ReorderApiPolicies1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReorderApiPolicies1(ctx, organizationId, apiId, version)
	return err
}

// GetApiVersionStatus1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiVersionStatus1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "apiId" -------------
	var apiId string

	err = runtime.BindStyledParameter("simple", false, "apiId", ctx.Param("apiId"), &apiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiVersionStatus1(ctx, organizationId, apiId, version)
	return err
}

// ListClients1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListClients1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClients1(ctx, organizationId)
	return err
}

// CreateClient1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClient1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateClient1(ctx, organizationId)
	return err
}

// DeleteClient1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClient1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClient1(ctx, organizationId, clientId)
	return err
}

// GetClient1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClient1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClient1(ctx, organizationId, clientId)
	return err
}

// UpdateClient1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClient1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateClient1(ctx, organizationId, clientId)
	return err
}

// GetClientActivity1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientActivity1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClientActivity1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClientActivity1(ctx, organizationId, clientId, params)
	return err
}

// ListClientVersions1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListClientVersions1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClientVersions1(ctx, organizationId, clientId)
	return err
}

// CreateClientVersion1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClientVersion1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateClientVersion1(ctx, organizationId, clientId)
	return err
}

// GetClientVersion1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientVersion1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClientVersion1(ctx, organizationId, clientId, version)
	return err
}

// GetClientVersionActivity1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientVersionActivity1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClientVersionActivity1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClientVersionActivity1(ctx, organizationId, clientId, version, params)
	return err
}

// GetClientApiKey1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientApiKey1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClientApiKey1(ctx, organizationId, clientId, version)
	return err
}

// UpdateClientApiKey1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClientApiKey1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateClientApiKey1(ctx, organizationId, clientId, version)
	return err
}

// GetApiRegistryJSON1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiRegistryJSON1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiRegistryJSON1Params
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiRegistryJSON1(ctx, organizationId, clientId, version, params)
	return err
}

// GetApiRegistryXML1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiRegistryXML1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiRegistryXML1Params
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiRegistryXML1(ctx, organizationId, clientId, version, params)
	return err
}

// DeleteAllContracts1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAllContracts1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAllContracts1(ctx, organizationId, clientId, version)
	return err
}

// GetClientVersionContracts1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientVersionContracts1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClientVersionContracts1(ctx, organizationId, clientId, version)
	return err
}

// CreateContract1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContract1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateContract1(ctx, organizationId, clientId, version)
	return err
}

// DeleteContract1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContract1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "contractId" -------------
	var contractId int64

	err = runtime.BindStyledParameter("simple", false, "contractId", ctx.Param("contractId"), &contractId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteContract1(ctx, organizationId, clientId, version, contractId)
	return err
}

// GetContract1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetContract1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "contractId" -------------
	var contractId int64

	err = runtime.BindStyledParameter("simple", false, "contractId", ctx.Param("contractId"), &contractId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contractId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContract1(ctx, organizationId, clientId, version, contractId)
	return err
}

// GetClientUsagePerApi1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientUsagePerApi1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClientUsagePerApi1Params
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClientUsagePerApi1(ctx, organizationId, clientId, version, params)
	return err
}

// ListClientPolicies1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListClientPolicies1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClientPolicies1(ctx, organizationId, clientId, version)
	return err
}

// CreateClientPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClientPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateClientPolicy1(ctx, organizationId, clientId, version)
	return err
}

// DeleteClientPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClientPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClientPolicy1(ctx, organizationId, clientId, version, policyId)
	return err
}

// GetClientPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClientPolicy1(ctx, organizationId, clientId, version, policyId)
	return err
}

// UpdateClientPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClientPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateClientPolicy1(ctx, organizationId, clientId, version, policyId)
	return err
}

// ReorderClientPolicies1 converts echo context to params.
func (w *ServerInterfaceWrapper) ReorderClientPolicies1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "clientId" -------------
	var clientId string

	err = runtime.BindStyledParameter("simple", false, "clientId", ctx.Param("clientId"), &clientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReorderClientPolicies1(ctx, organizationId, clientId, version)
	return err
}

// ListMembers1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListMembers1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMembers1(ctx, organizationId)
	return err
}

// RevokeAll1 converts echo context to params.
func (w *ServerInterfaceWrapper) RevokeAll1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RevokeAll1(ctx, organizationId, userId)
	return err
}

// ListPlans1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlans1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlans1(ctx, organizationId)
	return err
}

// CreatePlan1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlan1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlan1(ctx, organizationId)
	return err
}

// DeletePlan1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlan1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlan1(ctx, organizationId, planId)
	return err
}

// GetPlan1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlan1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlan1(ctx, organizationId, planId)
	return err
}

// UpdatePlan1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlan1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlan1(ctx, organizationId, planId)
	return err
}

// GetPlanActivity1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlanActivity1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlanActivity1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlanActivity1(ctx, organizationId, planId, params)
	return err
}

// ListPlanVersions1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlanVersions1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlanVersions1(ctx, organizationId, planId)
	return err
}

// CreatePlanVersion1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlanVersion1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlanVersion1(ctx, organizationId, planId)
	return err
}

// GetPlanVersion1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlanVersion1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlanVersion1(ctx, organizationId, planId, version)
	return err
}

// GetPlanVersionActivity1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlanVersionActivity1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlanVersionActivity1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlanVersionActivity1(ctx, organizationId, planId, version, params)
	return err
}

// ListPlanPolicies1 converts echo context to params.
func (w *ServerInterfaceWrapper) ListPlanPolicies1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPlanPolicies1(ctx, organizationId, planId, version)
	return err
}

// CreatePlanPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePlanPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePlanPolicy1(ctx, organizationId, planId, version)
	return err
}

// DeletePlanPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePlanPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePlanPolicy1(ctx, organizationId, planId, version, policyId)
	return err
}

// GetPlanPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlanPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlanPolicy1(ctx, organizationId, planId, version, policyId)
	return err
}

// UpdatePlanPolicy1 converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePlanPolicy1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId int64

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePlanPolicy1(ctx, organizationId, planId, version, policyId)
	return err
}

// ReorderPlanPolicies1 converts echo context to params.
func (w *ServerInterfaceWrapper) ReorderPlanPolicies1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId string

	err = runtime.BindStyledParameter("simple", false, "planId", ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReorderPlanPolicies1(ctx, organizationId, planId, version)
	return err
}

// Grant1 converts echo context to params.
func (w *ServerInterfaceWrapper) Grant1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Grant1(ctx, organizationId)
	return err
}

// Revoke1 converts echo context to params.
func (w *ServerInterfaceWrapper) Revoke1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organizationId" -------------
	var organizationId string

	err = runtime.BindStyledParameter("simple", false, "organizationId", ctx.Param("organizationId"), &organizationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationId: %s", err))
	}

	// ------------- Path parameter "roleId" -------------
	var roleId string

	err = runtime.BindStyledParameter("simple", false, "roleId", ctx.Param("roleId"), &roleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roleId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Revoke1(ctx, organizationId, roleId, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/organizations", wrapper.Create)
	router.DELETE("/organizations/:organizationId", wrapper.Delete)
	router.GET("/organizations/:organizationId", wrapper.Get)
	router.PUT("/organizations/:organizationId", wrapper.Update)
	router.GET("/organizations/:organizationId/activity", wrapper.Activity1)
	router.GET("/organizations/:organizationId/apis", wrapper.ListApis1)
	router.POST("/organizations/:organizationId/apis", wrapper.CreateApi1)
	router.DELETE("/organizations/:organizationId/apis/:apiId", wrapper.DeleteApi1)
	router.GET("/organizations/:organizationId/apis/:apiId", wrapper.GetApi1)
	router.PUT("/organizations/:organizationId/apis/:apiId", wrapper.UpdateApi1)
	router.GET("/organizations/:organizationId/apis/:apiId/activity", wrapper.GetApiActivity1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions", wrapper.ListApiVersions1)
	router.POST("/organizations/:organizationId/apis/:apiId/versions", wrapper.CreateApiVersion1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version", wrapper.GetApiVersion1)
	router.PUT("/organizations/:organizationId/apis/:apiId/versions/:version", wrapper.UpdateApiVersion1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/activity", wrapper.GetApiVersionActivity1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/contracts", wrapper.GetApiVersionContracts1)
	router.DELETE("/organizations/:organizationId/apis/:apiId/versions/:version/definition", wrapper.DeleteApiDefinition1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/definition", wrapper.GetApiDefinition1)
	router.POST("/organizations/:organizationId/apis/:apiId/versions/:version/definition", wrapper.UpdateApiDefinitionFromURL1)
	router.PUT("/organizations/:organizationId/apis/:apiId/versions/:version/definition", wrapper.UpdateApiDefinition1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/endpoint", wrapper.GetApiVersionEndpointInfo1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/metrics/clientResponseStats", wrapper.GetResponseStatsPerClient1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/metrics/clientUsage", wrapper.GetUsagePerClient1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/metrics/planResponseStats", wrapper.GetResponseStatsPerPlan1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/metrics/planUsage", wrapper.GetUsagePerPlan1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/metrics/responseStats", wrapper.GetResponseStats1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/metrics/summaryResponseStats", wrapper.GetResponseStatsSummary1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/metrics/usage", wrapper.GetUsage1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/plans", wrapper.GetApiVersionPlans1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/plans/:planId/policyChain", wrapper.GetApiPolicyChain1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/policies", wrapper.ListApiPolicies1)
	router.POST("/organizations/:organizationId/apis/:apiId/versions/:version/policies", wrapper.CreateApiPolicy1)
	router.DELETE("/organizations/:organizationId/apis/:apiId/versions/:version/policies/:policyId", wrapper.DeleteApiPolicy1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/policies/:policyId", wrapper.GetApiPolicy1)
	router.PUT("/organizations/:organizationId/apis/:apiId/versions/:version/policies/:policyId", wrapper.UpdateApiPolicy1)
	router.POST("/organizations/:organizationId/apis/:apiId/versions/:version/reorderPolicies", wrapper.ReorderApiPolicies1)
	router.GET("/organizations/:organizationId/apis/:apiId/versions/:version/status", wrapper.GetApiVersionStatus1)
	router.GET("/organizations/:organizationId/clients", wrapper.ListClients1)
	router.POST("/organizations/:organizationId/clients", wrapper.CreateClient1)
	router.DELETE("/organizations/:organizationId/clients/:clientId", wrapper.DeleteClient1)
	router.GET("/organizations/:organizationId/clients/:clientId", wrapper.GetClient1)
	router.PUT("/organizations/:organizationId/clients/:clientId", wrapper.UpdateClient1)
	router.GET("/organizations/:organizationId/clients/:clientId/activity", wrapper.GetClientActivity1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions", wrapper.ListClientVersions1)
	router.POST("/organizations/:organizationId/clients/:clientId/versions", wrapper.CreateClientVersion1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version", wrapper.GetClientVersion1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/activity", wrapper.GetClientVersionActivity1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/apikey", wrapper.GetClientApiKey1)
	router.PUT("/organizations/:organizationId/clients/:clientId/versions/:version/apikey", wrapper.UpdateClientApiKey1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/apiregistry/json", wrapper.GetApiRegistryJSON1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/apiregistry/xml", wrapper.GetApiRegistryXML1)
	router.DELETE("/organizations/:organizationId/clients/:clientId/versions/:version/contracts", wrapper.DeleteAllContracts1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/contracts", wrapper.GetClientVersionContracts1)
	router.POST("/organizations/:organizationId/clients/:clientId/versions/:version/contracts", wrapper.CreateContract1)
	router.DELETE("/organizations/:organizationId/clients/:clientId/versions/:version/contracts/:contractId", wrapper.DeleteContract1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/contracts/:contractId", wrapper.GetContract1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/metrics/apiUsage", wrapper.GetClientUsagePerApi1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/policies", wrapper.ListClientPolicies1)
	router.POST("/organizations/:organizationId/clients/:clientId/versions/:version/policies", wrapper.CreateClientPolicy1)
	router.DELETE("/organizations/:organizationId/clients/:clientId/versions/:version/policies/:policyId", wrapper.DeleteClientPolicy1)
	router.GET("/organizations/:organizationId/clients/:clientId/versions/:version/policies/:policyId", wrapper.GetClientPolicy1)
	router.PUT("/organizations/:organizationId/clients/:clientId/versions/:version/policies/:policyId", wrapper.UpdateClientPolicy1)
	router.POST("/organizations/:organizationId/clients/:clientId/versions/:version/reorderPolicies", wrapper.ReorderClientPolicies1)
	router.GET("/organizations/:organizationId/members", wrapper.ListMembers1)
	router.DELETE("/organizations/:organizationId/members/:userId", wrapper.RevokeAll1)
	router.GET("/organizations/:organizationId/plans", wrapper.ListPlans1)
	router.POST("/organizations/:organizationId/plans", wrapper.CreatePlan1)
	router.DELETE("/organizations/:organizationId/plans/:planId", wrapper.DeletePlan1)
	router.GET("/organizations/:organizationId/plans/:planId", wrapper.GetPlan1)
	router.PUT("/organizations/:organizationId/plans/:planId", wrapper.UpdatePlan1)
	router.GET("/organizations/:organizationId/plans/:planId/activity", wrapper.GetPlanActivity1)
	router.GET("/organizations/:organizationId/plans/:planId/versions", wrapper.ListPlanVersions1)
	router.POST("/organizations/:organizationId/plans/:planId/versions", wrapper.CreatePlanVersion1)
	router.GET("/organizations/:organizationId/plans/:planId/versions/:version", wrapper.GetPlanVersion1)
	router.GET("/organizations/:organizationId/plans/:planId/versions/:version/activity", wrapper.GetPlanVersionActivity1)
	router.GET("/organizations/:organizationId/plans/:planId/versions/:version/policies", wrapper.ListPlanPolicies1)
	router.POST("/organizations/:organizationId/plans/:planId/versions/:version/policies", wrapper.CreatePlanPolicy1)
	router.DELETE("/organizations/:organizationId/plans/:planId/versions/:version/policies/:policyId", wrapper.DeletePlanPolicy1)
	router.GET("/organizations/:organizationId/plans/:planId/versions/:version/policies/:policyId", wrapper.GetPlanPolicy1)
	router.PUT("/organizations/:organizationId/plans/:planId/versions/:version/policies/:policyId", wrapper.UpdatePlanPolicy1)
	router.POST("/organizations/:organizationId/plans/:planId/versions/:version/reorderPolicies", wrapper.ReorderPlanPolicies1)
	router.POST("/organizations/:organizationId/roles", wrapper.Grant1)
	router.DELETE("/organizations/:organizationId/roles/:roleId/:userId", wrapper.Revoke1)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdTXPbONL+Kym+71FjOpmtPfi0jp3NeuLYLnsyu1tTOcBkS8aYXwOAVjQq/fctACRF",
	"UgQIWuKXxUtiASTQ6H7Q6G40wLXlhH4UBhAwap2tLQJ/xkDZx9DFIApuYHkXethZfQQU3Ge1K17nhAGD",
	"gPE/URR52EEMh4H9Bw0DXkadJ/AR/+v/CcytM+v/7G1ntqyldqEDa7PZbGaWLLh4Qjhoq9tSF0nH3yIX",
	"MWh3wOU+RNebWfK2YPp5hEXN2dqKSBgBYYk0HAKIgftRUMNWEVhnFmUEBwtrM0trb8WL85D4iFlnFu/t",
	"J4Z9sGa7r7hAHYIjPozKJrFbWRwgH6orYv8ufvQwfQK3QAUO2M8fthTggMECCH8lJAsU4L9QSoOOd7e5",
	"ZxPeZU2Gj3+Aw3iL5xH+jBgs0aqaiwtZeVU1NkV7X0DRFhJ15g3deSiobinyUHBVze4XILRaQppeHmLf",
	"R2Sl7uyyRvYagnjVjQoDjanVUjoAUOcRqmBI/hEFYxSD/01yS4muuimR6ort/D+kdpjjAPMx/Sqq1hYE",
	"sW+d/W7dhAF/42GJFgsgvzzc3mx//ff867U1s/79cCn+Oxf/3cvCTz8YkAB51ndtd9+IVzkGF1P06MEX",
	"WNEHRnCUe+gxDL2EDxC4UYilnt5pIq28kLq8PDChy2fWD7+axPTtu6KYXFeQjbxi+c7rOwBI2yuTQYAy",
	"a2bREEWVdCQqTPSCGfjUACZ5nbilBRGCVtbMigP8ZwxXsi1GYsgmSl6H//1vlTrcD108x0ropdVNsBch",
	"QuEOrbwQudVi5kqoEQMy3Ws2+ogvZM753ZWi+3SdazIqAgyTZq9QhlhM8+C4kDOZzypALid/u+byMtFF",
	"JWwaq+ZEO31KYKrV1D4K0ALcT+rZp+/kQQy0uu1MxEayli1xaVaK+6BMrRmTjmHDXKdqgd8jIGMXs08B",
	"O6StgBhSrBMMs5WCjbKyrLTz1qk1sy48zJ2FmcX1jiVQoVhTeGO/KTnRQA8bIGD5hNiu7KzU97Fm1iV4",
	"IP648OQq/5kgMY57eAmfYSvdTLbijwWmDAhvKCDbH+euK10d8YwfvkD2M+8IidqQuEDEby7PWUIaX6gJ",
	"cjgBHwmg59zv69B5zhq6zKyHbAy5oirGL59CQ+BJUY7UJzu8gyXZ0aluC2I/FTx9hWN5WLNdjv8bRQu4",
	"A6L01lPdojIPDSZ0qWs1MXVuxDMo8CmVVA0scvhvw8/o1c4ckBmXKtEDL5sFhGhnrTKaMRussdInXxOF",
	"tI/vnp+3Dadj+dXeZiV3xGrjrR4KCgTrGFqH0brIFYqwAlIowkokoQjf1oOy9JSuNZ1JJwWt6ENWKpuW",
	"1Qa07j5Y06aW4kQ4V6aweAXkXhtyjLboMpy7wqa9Dz1QOJwk9ODKLbqcqnCOLogQUyDGgeav4D8CqSYI",
	"fISrg2J/hDhouHzxcRt705IqziuVN60cpKxqYFmV+lKIpbInXtWgpxtYqg23wcU9axTeYOKiTeOYYtzI",
	"0+kdpQUx8AihGnRbt3QU8FMPROt0OCJ6UCkXUaWT+bTxcKgJNvgwejOT+waWulhMrZPyanWjJabO+f6i",
	"dL5fP0Wa863OW9EavOpKHZFKe05B4074qbGEm4lPvRvfOZLKDtJB9WljsOTSU3YJCYM5XsQEsXr1bSz8",
	"eskPJc7aQgyqAVLUiD3COHRtmst4MkHqp39v4R0vdJ6bNd1GmNYwxvSxwSbltRjYAQKBOeGNcsO3W2bt",
	"tbS0mONkljJact4M9KTBTvJBNn+7W5g4rFwgV4ELPw63GcdKro3Z/rkaYtvk3t30x3ST2dTtkS3mJ/dO",
	"GExNSL2/7wEDhXtWhy7Oe2VF2Vu8hDmKPc7TX2gYPMh85cq4jHMgFRV58QIHxjFjIZjVlR9Vu+EM/MhD",
	"rLHgthL4NWnB2IE1EWuh0R3xeihYxGgB2hE1Up4mCbMd2oHOvppLjZ4So43diXugURhQeGCI0UvE0F0a",
	"lylF1QkJielm/BxhLybGe/ceegQFjEOGPKNWasf2L0xZuCDI16cgGM0VBdOMNF3h3Tsg2ihNTV7EXjTq",
	"UiXKRGrc/0GQqJ3nbUJ3P4A+ACLO0z3Q2GNie60ub+8RGoUgi61V7EcJ8h/wX2BknFQOoZhBuosPZSym",
	"sQ0fSXxVt0bABxerzOEqymUynGZrS6fMtQ1q3dMpM7/TzPwR7n1JHL0+eq9uc9+osbrl18aHNS3u4f1W",
	"tkrRAjQGjhPGsngPg0XZ7yGNj9JAjIyONANzH2PjMEmYKSWvtygOQcdGbEzMw/SsKnJYLnXEcmPfX/1D",
	"/HvihL6Vrkqygs9zwh97Yiw6s21RKB/G4Y4fYN1GEJzfXb37+eT0HY3AwfPkOOy7cP6OV3wVx0GINbM8",
	"7EBAhRZNOjyPkPME7z6cnBZ6pWe2vVwuT5CoPgnJwk7epfb11cWnm4dPP304OT15Yr4nnSfi09v5A5AX",
	"7MCWdBRhHwW2qLY5KzHzRLcFsrKwlfX+5PTkVC7GEIi8PetnUcQVLXsS8rGRw0fH/97MLNsNlwFXvtRe",
	"p39euZukMrcG5H/a6+zk6UZTZedWSf5MPnSSRC+okCuHTxZQ2Sbyk3ZOaVeE5DfCQpEGq6Dsw+npwbqs",
	"6q8MQho7DlA6j713GTPkxEALWj6SQa3vmx1+2utiZGqzDcjssjg7GREhgnxgwO3v39cW5rRwpGynVCne",
	"JaUi8k7FAjrLMaGsbb+XmOomQZvyqtN89DNrARXI+Qys6zENHijcwKlgVXZIpn1utXXzgMk8Phzk6iec",
	"UKwvmIlxVuLzPHngfdt8nyUN/hkDWW1bjNCCi3z7noFLWd2StMaaNdXm1Knz1LtRuXy9pkrpX2PKziNM",
	"3w9dR5k6WvpdhIOoLo2BcB7h9yPVX7mU3ZZtj1w3XeHfXosULAP7owsJzioblEliQ7dlxsyfoYJYaw6N",
	"juFtmVYa7dStRZXTJ/XmlZwynRtZ+0pyMtb6M9YycCUxlFrrLdk7oEejmE2NwYq0sV5swoSOY9fju+da",
	"2rc0S731NoftdfLXpmapGBtWqttJw78DMtcOjYQ6q+3IBdmiGXjsGsTU6kwoH63xuT8SJzN2QGZsDsBO",
	"/rahegRnlxNNEH4bEDYy4KsuLGnDfD8AnovnHGojjNuc28nM6ypqOfG8JZ5X+76Zsbbl+z9J6H+7v54M",
	"4sP60+UzU22GR+t8nmmSDSIqXbFC5ZOD6w2u9Jrhq2AeTpJsyaOsuvd5IPaMD4xgh9ry4rLCsQkdgKrP",
	"qUxGe9rUnIjE0MbvsdDqC66ao0eDxKrIFdZhtJjWPGFzxNisyFAfGCYjDwWv1p53HgomfL4h3bk9BDQ8",
	"lBrrzQmVb0RrDhWN5FX6coJk2hQOGJAX5BUAlh6w9MNAdLsEeLZmlitOID6FMbFmlo+DmEHlLSBvUyUX",
	"T9gNbBpQ6RW+znpIXMppUrwVqA44RhAbWQ4TFCf9bGqcDFIvZ0f+66On3LKiU9i0tbTO8s2UA90UFoix",
	"1/Ka3o0dbe9Nq4FR7oa1I1abxZaSy46HEsWv+ML1ICCXu3pPlzGefgduUlLtKCmTGw07yDuXZEwb7gpp",
	"Fb7Hbys/xr9pXY8MUYXY6+S6SMNTk0eLNcV6lTBP21T9BXA9JUtNwuxCmANWJHWJPhNAWgNIw2WrfPOZ",
	"buUaVEYSKX2SWHn3UvLt4slsbQqNkpMyGmRsb8yvj7XIu0QnP6alHDXJ3i7tU5nGo/dgZcLHG7m0Zvd7",
	"3937ih0lQ7WXB11MAWrTY+s+2SiZEfY6/aytgUPWa3Zb9vndoR8LGT+XBoxsrQsxUs63dahZr746Nc52",
	"tY3RcWM5gp6PGr9KsNMZ4X7OCFcAzejCm8JXQekxKe8G5uQgbr4pkDLpervyk7admKs93GGhmd5md+GM",
	"Fj3j8PGHDYwGNscwbjnpGSmTETM4IyYP5gg/g4n5LL5mPum6FuKZX2DVpWd79JI8vPVUFOJmPHA5pBoh",
	"sMCUkVU2Is0OyX3y7C8PtzfTqphby9JvyliDvc2hOR5++J4hHP7z9XpCwxtEQ+FOtZp0Lc/r+0q1gVkb",
	"3e02DORKu5Fbe4O6QK4mCpZQMRmDBw6lJXztJIpW6ms2PK1vr9M/zTaIjxqVCqIyBo4wa3cSaIcCPQ7d",
	"kp7wRRGuvR7kYnv70p3I1Zx8jHGfxN0R6PDwaXTaTY6j58zhY7C2h3DmLSfsKfg6nXzbR6k0Ov824e7N",
	"nYKbRDqdhTPe7ptgMp2IO9QC1PRc3GTgvq3TcT74j0J0Gqfmq3zmbRyAkoPp8yafhOX2OqZAagy+e3gJ",
	"n+Hc83qaaZLE8XyYQH9vFgdzN9dldeMDd3Azld4D7uR63vY2dfKX0rbqfXZ8+W3xLrB6h7LHW5YPcNNW",
	"F/7ZuDk0WCxrnZ0R8rytE3s6RdX9+rq9ZdAkb57T3nO6/CvEOaW495PiXgKY0Rk9jrCeT+j1oKSNTcRB",
	"nM7LEXL0Oj2xPDs8l1fRXY+T2exE3igRM44TKkOFg7E9MYxTeL3iYzJQBmWgNE0U4SjuOYo+avU2miSR",
	"TNCroxXzlCCynyJplBxy3Hh7c4khkzinpBCDOOkEkSkhZP8Fp2kyyGTEvp1EEBJ6Ool/Jmi8V7YK4u/5",
	"AAexiSJYba/5f/yneR5IT3NMEvoWs0kiL15gsbuQ+2WjF4Q99OjBXWX1Wv4hJVZdkXx+6xLm1OSZ1MC/",
	"hDmv4OtS+tpOO1Uv4QAn2EqeSidz9neGtqSQimCKjSJ8gRjywoUNASM4e2m3nouQRsipeKRUsr1TO1dY",
	"mBLFqjyxSREHSla0ogx8G35EIWHFMuzvlmXXufMy0Y7txIRAwPgPGwfzsFCZm327hfmAZFVthEOyoMpK",
	"RY1kkPpNcDHj8PupyMnSU1UcLT0SAfExpZoHPBSo6XjBsCzTsZlZFMhLqn5i4lln1hNj0ZltoyjiIvEs",
	"PmuTabdO5/65I2fkLCu5TK/CyJV9RgyWaJUvys/bfLmcnIUSMR/ebSdEvpKr//xvGU4slAgA5Uu+UW4F",
	"ft/8LwAA//8J7x8QW+kAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

