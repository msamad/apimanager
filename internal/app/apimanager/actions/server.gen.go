// Package actions provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package actions

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /actions)
	PostAction(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostAction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAction(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/actions", wrapper.PostAction)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RYzXLbNhB+FQ3aoyK4yY2nOk6m45m21sSTXjI+rMElhQR/BUApLIfv3gFISSQlOaRC",
	"X+zF/nxY7H4AKFSEaWm0QuUdSSri2AYlRPGWea7VewQVRsZqg9ZzjDZUnvvyPg2yLw2ShDhvucpJvWyN",
	"/6B1XKuzHtrmoPh/ECa4ANIowkyFJMkXYopnwd3mdn1PlsSi5xb3cs6dR3snOCpPlqRQJyqh2be1AEWe",
	"lsOZDlMR/fwVmSd1UHGV6TA708oD8zERCVyQhKSFlOXv8e+KaUmWRIHEvSHMb4PbxnuTUBqVjTPXYV0p",
	"Oma58bE05MGgul3fL96tbhbOIOMZZ7EqC50tguEvUJCjDWvgDJWLNWknvDXANrh4u7rpzeoSSne73Qqi",
	"eaVtTttYR/+8v/v49+PHN29XN6uNlyJWGq10D9kj2i1neEwdDJegaDRTsiSeexGn7aW13beZ/La6Wd3E",
	"7hpUYDhJyLuoWhIDfhN5QyGSKspGu1jYwKsDE8haO98wL/b23wKdf6/Tct+N0NCkImCMaEtFv7qGZg13",
	"g/SrxYwk5Bd6JDdtmU07tK5jry06o0N1QmSKGRTCN2K3U65gDJ3LCrE4JNywB3IXCHrbruwpKGmqd0po",
	"SB2t9uJ9WpOkCsYcPO6gdIMhrVrp1LNroqhSo3msQ/DpbiZ3Tker/n6rRznFVm25L0d6G+7Ge9IKDB+f",
	"SSfiirQOoS1X3U+E0qqV6llA5lhNBy1sEAvMz7NCmmLGFW82wBx4LxF3OppEbzlzlMVT/lO7ix89zLX8",
	"/gSfHeQ4L7ARoF4x7wD/Clnb18vYFVKCLV+xJsV89QjldTNC0Sr8Cx5GC87Kuw3wmTZeBGw+3WZEo1WT",
	"6HXn+Blgi9qmaNezZus8+GIkVrPTpznTqhFGV+E0buItcAZg2s32AsDU+20U1Hzr62Ia/g3nRmx+Odhy",
	"/035KtjfpZgTeuKlPxGUVnvxZwj+wokMhk+4pMZhTzvvpmFOPvXGwV919kmUz2inOdOqcGhHZz/hluvf",
	"YtfETDwoBsHTDsELwVMPwB/CzLOmq8k9Hm8ysX8MfRWprRaTXGkV/oXhgNlGFDk/0KEdUdgCF/AscH3W",
	"XDXCCUrH0H6ffcDMjfHZ1/UDZsGQaSv3YSc454Lan2DHjLoF6legVToEyzbhZL0DD0LnFJW3xwac2hVI",
	"dAbYGZeBpv+J1CrPPUG0pm6yrSp06aAqnUdJ8bvR1vd1XJ7qeh9zEYeywlpUPgxo+2x3NA4Y0VcOd+bQ",
	"ari2ubtovGBpCnQ5ElPuA/3e9Cs58DpX0YGLQSu5cy84CFCX89hy3A3zqJfEod3G9nyp+i+ZYExoiSD1",
	"0+HR6/gU2bzY1cuD5kP76tXV/dG8YXVVD511dvXN5uxp4n5YHDdE1/hJC+yOHyPTeppIoK7ms0NL6qf6",
	"/wAAAP//fq3pMgMXAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

