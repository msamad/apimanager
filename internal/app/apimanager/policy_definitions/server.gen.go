// Package policy_definitions provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package policy_definitions

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /policyDefs)
	List1(ctx echo.Context) error

	// (POST /policyDefs)
	Create2(ctx echo.Context) error

	// (DELETE /policyDefs/{policyDefinitionId})
	Delete2(ctx echo.Context, policyDefinitionId string) error

	// (GET /policyDefs/{policyDefinitionId})
	Get2(ctx echo.Context, policyDefinitionId string) error

	// (PUT /policyDefs/{policyDefinitionId})
	Update1(ctx echo.Context, policyDefinitionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List1 converts echo context to params.
func (w *ServerInterfaceWrapper) List1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.List1(ctx)
	return err
}

// Create2 converts echo context to params.
func (w *ServerInterfaceWrapper) Create2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Create2(ctx)
	return err
}

// Delete2 converts echo context to params.
func (w *ServerInterfaceWrapper) Delete2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyDefinitionId" -------------
	var policyDefinitionId string

	err = runtime.BindStyledParameter("simple", false, "policyDefinitionId", ctx.Param("policyDefinitionId"), &policyDefinitionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyDefinitionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Delete2(ctx, policyDefinitionId)
	return err
}

// Get2 converts echo context to params.
func (w *ServerInterfaceWrapper) Get2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyDefinitionId" -------------
	var policyDefinitionId string

	err = runtime.BindStyledParameter("simple", false, "policyDefinitionId", ctx.Param("policyDefinitionId"), &policyDefinitionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyDefinitionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get2(ctx, policyDefinitionId)
	return err
}

// Update1 converts echo context to params.
func (w *ServerInterfaceWrapper) Update1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyDefinitionId" -------------
	var policyDefinitionId string

	err = runtime.BindStyledParameter("simple", false, "policyDefinitionId", ctx.Param("policyDefinitionId"), &policyDefinitionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyDefinitionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Update1(ctx, policyDefinitionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/policyDefs", wrapper.List1)
	router.POST("/policyDefs", wrapper.Create2)
	router.DELETE("/policyDefs/:policyDefinitionId", wrapper.Delete2)
	router.GET("/policyDefs/:policyDefinitionId", wrapper.Get2)
	router.PUT("/policyDefs/:policyDefinitionId", wrapper.Update1)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZTXPbNhP+Kxq871ERFKfTg05N7EzGnbTxxMkp48MaXFFI8RUAtKNy9N87ACGJpCiF",
	"lOl22osE7i4e7Bew4LIkTEujFSrvyKIkjq1QQhzeaMHZ+gqXXHHPtXqDoALdWG3Qeo5RKkOBHrMw9GuD",
	"ZEHutRZBdDMlGTpmuQmzawLOW67ywF9qK48yPkViSVAVkiy+kCtcQiE8mZJfnVa3UVFyNz2czNmR5XjW",
	"SVYgsZNhRJFzdR1nBY3AkwXhyv/8E9kty5XHHG0Ujw67lkZ0onmURoCv3MY9yjj4v8UlWZD/0X0caAoC",
	"bUfgU0J4k9yblgBrYU2mpFD8W4HXFbK3BW72Mvr+KzIfJrVBbwspwa6PRffHAfxvxamPyxpxOPCZAJUX",
	"kOPJJOi58meTgce+O/F0rI66+4hfD/UJJK6WOggzrTwwHwMvgQuyIFkh5fqX+DtjWpItcsUICWqD2Mp7",
	"s6A0Eithrg8OC/LBoHp9cz15NZtPnEHGl5xB4E30chIYv4GCENApEZyhctGEtOBrA2yFk4vZvLGqW1D6",
	"+Pg4g8ieaZvTNNfR99eXb3+/ffviYjafrbwUVbCsdB+Wt2gfOMO96mC4BEUjm4YU417EZRtqPaB1lS0v",
	"Z/PZPABqgwoMJwvyKpKmxIBfxehRYMG6MN5MCc30oxIaMkfL7fA62yRmDh4fYe1aj7RMo0PJOouiyozm",
	"yicZbXNQ/E+oL9+g0bL+uAc/LRQNeuB+3VPacNdfkpZgeH9NajPOUGs3NUXUPWEqLdNoMwrIGNbU0MKm",
	"tsD8OBbSbHdijYN3KnGHo0n0ljNHmeCo/Ed0RiuHtx7GMr+5wGdX1YQRgY0A9Yx6B/hn0No+n8auuss8",
	"o0+K8fwR3OtGhKJl+AsS1QXncgV8pI0XAatrxohotEw3sWykw9Cithnam1G1dR580ROr2unDhGlZDXp7",
	"4XDewCrQATCssp0AGFrfekGNZ18d0/A/cGxEizl33q7pV9e36A3H/i7FmNADi/5AUFpuh09J8BMnMhg+",
	"oEj1wx523g3DHHzq9YM/6+yTKO/RDhOmZeHQ9tZ+QJVrVrFz5gw8KFqThx2CRyYPPQB/CDOOTWcnd3+8",
	"wYn9Y+izktpqMUiUluEvPLYyu2orueYThQfgAu4F3nSyy20zanOUke5nV7h0fWS2fr3CZWCknmmcVsch",
	"OcZujDZok4FkQd5z51+SKdleuqPkxXy+beFgfJsiYIxI/ZVt6Uqt4LOblfW+YrtXGTtJzX6PKxhD55aF",
	"mOwsqHpQkDuy+JKacJP9Ao7cxWae6zD70iJ4vIiGfyvQ+Tc6Ww+yeYiplY3RqCf5+Zw1x/FjM5tqGZdk",
	"qnROzf5Dd19F+kXsZ1mQ6GNR+VKS8AISe1z7ZuAhdIoSt5hVfetpzSftpuRdy8dZ6ja3G6BnJ1TnNnqH",
	"/h+x7t+TQVNiig7HVQ3sl3+b78bf7Cda8B1bfuR0DPuyXs+aBSsRHYJlq3ARvgQPQucUlbf7ennIDw53",
	"BliHSIvSfKNNxK6OcWLVlU2kUFR3pLXzKCl+N9r6Jo3LQ1rj3TviUFZYi8qHB5q+ReyZrQLeJLYvUm2u",
	"4drm7ijzCKdy0PGZmHEfbgsvmp5sSXV5tCVi0Eru3AkBAeq4Hg8cH9t6bKbEoX3YbsnG5xkwJoREkLCv",
	"Uo7uv6+wKn2nO8pV+khRp72rPjnUSR9qdtbp1V2qQWlvhzrzoxZYf76NmdagxASqUz47tGRzt/krAAD/",
	"/9qVyjTyHgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

