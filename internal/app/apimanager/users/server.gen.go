// Package users provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package users

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /users/currentuser/info)
	GetInfo1(ctx echo.Context) error

	// (GET /users/{userId})
	Get4(ctx echo.Context, userId string) error

	// (PUT /users/{userId})
	Update3(ctx echo.Context, userId string) error

	// (GET /users/{userId}/activity)
	GetActivity1(ctx echo.Context, userId string, params GetActivity1Params) error

	// (GET /users/{userId}/apiorgs)
	GetApiOrganizations1(ctx echo.Context, userId string) error

	// (GET /users/{userId}/apis)
	GetApis1(ctx echo.Context, userId string) error

	// (GET /users/{userId}/clientorgs)
	GetClientOrganizations1(ctx echo.Context, userId string) error

	// (GET /users/{userId}/editable-clients)
	GetEditableClients1(ctx echo.Context, userId string) error

	// (GET /users/{userId}/organizations)
	GetOrganizations1(ctx echo.Context, userId string) error

	// (GET /users/{userId}/permissions)
	GetPermissionsForUser1(ctx echo.Context, userId string) error

	// (GET /users/{userId}/planorgs)
	GetPlanOrganizations1(ctx echo.Context, userId string) error

	// (GET /users/{userId}/viewable-clients)
	GetClients1(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetInfo1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetInfo1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInfo1(ctx)
	return err
}

// Get4 converts echo context to params.
func (w *ServerInterfaceWrapper) Get4(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get4(ctx, userId)
	return err
}

// Update3 converts echo context to params.
func (w *ServerInterfaceWrapper) Update3(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Update3(ctx, userId)
	return err
}

// GetActivity1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivity1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivity1Params
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetActivity1(ctx, userId, params)
	return err
}

// GetApiOrganizations1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiOrganizations1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiOrganizations1(ctx, userId)
	return err
}

// GetApis1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApis1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApis1(ctx, userId)
	return err
}

// GetClientOrganizations1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClientOrganizations1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClientOrganizations1(ctx, userId)
	return err
}

// GetEditableClients1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetEditableClients1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEditableClients1(ctx, userId)
	return err
}

// GetOrganizations1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizations1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganizations1(ctx, userId)
	return err
}

// GetPermissionsForUser1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPermissionsForUser1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPermissionsForUser1(ctx, userId)
	return err
}

// GetPlanOrganizations1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlanOrganizations1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlanOrganizations1(ctx, userId)
	return err
}

// GetClients1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetClients1(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClients1(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/users/currentuser/info", wrapper.GetInfo1)
	router.GET("/users/:userId", wrapper.Get4)
	router.PUT("/users/:userId", wrapper.Update3)
	router.GET("/users/:userId/activity", wrapper.GetActivity1)
	router.GET("/users/:userId/apiorgs", wrapper.GetApiOrganizations1)
	router.GET("/users/:userId/apis", wrapper.GetApis1)
	router.GET("/users/:userId/clientorgs", wrapper.GetClientOrganizations1)
	router.GET("/users/:userId/editable-clients", wrapper.GetEditableClients1)
	router.GET("/users/:userId/organizations", wrapper.GetOrganizations1)
	router.GET("/users/:userId/permissions", wrapper.GetPermissionsForUser1)
	router.GET("/users/:userId/planorgs", wrapper.GetPlanOrganizations1)
	router.GET("/users/:userId/viewable-clients", wrapper.GetClients1)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

